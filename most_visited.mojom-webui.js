// mojom-webui/ui/webui/resources/cr_components/most_visited/most_visited.mojom-webui.js is auto generated by mojom_bindings_generator.py, do not edit
// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
import { mojo } from '//resources/mojo/mojo/public/js/bindings.js';
import { TextDirectionSpec as mojoBase_mojom_TextDirectionSpec } from 'chrome://resources/mojo/mojo/public/mojom/base/text_direction.mojom-webui.js';
import { SkColorSpec as skia_mojom_SkColorSpec } from 'chrome://resources/mojo/skia/public/mojom/skcolor.mojom-webui.js';
import { UrlSpec as url_mojom_UrlSpec } from 'chrome://resources/mojo/url/mojom/url.mojom-webui.js';
/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class MostVisitedPageHandlerFactoryPendingReceiver {
    /**
     * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
     */
    constructor(handle) {
        /** @public {!mojo.internal.interfaceSupport.Endpoint} */
        this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
    }
    /** @param {string=} scope */
    bindInBrowser(scope = 'context') {
        mojo.internal.interfaceSupport.bind(this.handle, 'most_visited.mojom.MostVisitedPageHandlerFactory', scope);
    }
}
/** @interface */
export class MostVisitedPageHandlerFactoryInterface {
    /**
     * @param { !MostVisitedPageRemote } page
     * @param { !MostVisitedPageHandlerPendingReceiver } handler
     */
    createPageHandler(page, handler) { }
}
/**
 * @implements { MostVisitedPageHandlerFactoryInterface }
 */
export class MostVisitedPageHandlerFactoryRemote {
    /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
    constructor(handle = undefined) {
        /**
         * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!MostVisitedPageHandlerFactoryPendingReceiver>}
         */
        this.proxy =
            new mojo.internal.interfaceSupport.InterfaceRemoteBase(MostVisitedPageHandlerFactoryPendingReceiver, handle);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!MostVisitedPageHandlerFactoryPendingReceiver>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
    }
    /**
     * @param { !MostVisitedPageRemote } page
     * @param { !MostVisitedPageHandlerPendingReceiver } handler
     */
    createPageHandler(page, handler) {
        this.proxy.sendMessage(0, MostVisitedPageHandlerFactory_CreatePageHandler_ParamsSpec.$, null, [
            page,
            handler
        ]);
    }
}
/**
 * An object which receives request messages for the MostVisitedPageHandlerFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class MostVisitedPageHandlerFactoryReceiver {
    /**
     * @param {!MostVisitedPageHandlerFactoryInterface } impl
     */
    constructor(impl) {
        /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!MostVisitedPageHandlerFactoryRemote>} */
        this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(MostVisitedPageHandlerFactoryRemote);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MostVisitedPageHandlerFactoryRemote>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);
        this.helper_internal_.registerHandler(0, MostVisitedPageHandlerFactory_CreatePageHandler_ParamsSpec.$, null, impl.createPageHandler.bind(impl));
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
    }
}
export class MostVisitedPageHandlerFactory {
    /**
     * @return {!string}
     */
    static get $interfaceName() {
        return "most_visited.mojom.MostVisitedPageHandlerFactory";
    }
    /**
     * Returns a remote for this interface which sends messages to the browser.
     * The browser must have an interface request binder registered for this
     * interface and accessible to the calling document's frame.
     *
     * @return {!MostVisitedPageHandlerFactoryRemote}
     */
    static getRemote() {
        let remote = new MostVisitedPageHandlerFactoryRemote;
        remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
        return remote;
    }
}
/**
 * An object which receives request messages for the MostVisitedPageHandlerFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class MostVisitedPageHandlerFactoryCallbackRouter {
    constructor() {
        this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(MostVisitedPageHandlerFactoryRemote);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MostVisitedPageHandlerFactoryRemote>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);
        this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.createPageHandler =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(0, MostVisitedPageHandlerFactory_CreatePageHandler_ParamsSpec.$, null, this.createPageHandler.createReceiverHandler(false /* expectsResponse */));
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
    }
    /**
     * @param {number} id An ID returned by a prior call to addListener.
     * @return {boolean} True iff the identified listener was found and removed.
     */
    removeListener(id) {
        return this.router_.removeListener(id);
    }
}
/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class MostVisitedPageHandlerPendingReceiver {
    /**
     * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
     */
    constructor(handle) {
        /** @public {!mojo.internal.interfaceSupport.Endpoint} */
        this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
    }
    /** @param {string=} scope */
    bindInBrowser(scope = 'context') {
        mojo.internal.interfaceSupport.bind(this.handle, 'most_visited.mojom.MostVisitedPageHandler', scope);
    }
}
/** @interface */
export class MostVisitedPageHandlerInterface {
    /**
     * @param { !url_mojom_Url } url
     * @param { !string } title
     * @return {!Promise<{
          success: !boolean,
     *  }>}
     */
    addMostVisitedTile(url, title) { }
    /**
     * @param { !url_mojom_Url } url
     */
    deleteMostVisitedTile(url) { }
    /**
     * @param { !url_mojom_Url } url
     * @param { !number } newPos
     */
    reorderMostVisitedTile(url, newPos) { }
    /**
     */
    restoreMostVisitedDefaults() { }
    /**
     */
    undoMostVisitedTileAction() { }
    /**
     */
    updateMostVisitedInfo() { }
    /**
     * @param { !url_mojom_Url } url
     * @param { !url_mojom_Url } newUrl
     * @param { !string } newTitle
     * @return {!Promise<{
          success: !boolean,
     *  }>}
     */
    updateMostVisitedTile(url, newUrl, newTitle) { }
    /**
     * @param { !Array<!MostVisitedTile> } tiles
     * @param { !number } time
     */
    onMostVisitedTilesRendered(tiles, time) { }
    /**
     * @param { !MostVisitedTile } tile
     * @param { !number } index
     * @param { !number } mouseButton
     * @param { !boolean } altKey
     * @param { !boolean } ctrlKey
     * @param { !boolean } metaKey
     * @param { !boolean } shiftKey
     */
    onMostVisitedTileNavigation(tile, index, mouseButton, altKey, ctrlKey, metaKey, shiftKey) { }
}
/**
 * @implements { MostVisitedPageHandlerInterface }
 */
export class MostVisitedPageHandlerRemote {
    /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
    constructor(handle = undefined) {
        /**
         * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!MostVisitedPageHandlerPendingReceiver>}
         */
        this.proxy =
            new mojo.internal.interfaceSupport.InterfaceRemoteBase(MostVisitedPageHandlerPendingReceiver, handle);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!MostVisitedPageHandlerPendingReceiver>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
    }
    /**
     * @param { !url_mojom_Url } url
     * @param { !string } title
     * @return {!Promise<{
          success: !boolean,
     *  }>}
     */
    addMostVisitedTile(url, title) {
        return this.proxy.sendMessage(0, MostVisitedPageHandler_AddMostVisitedTile_ParamsSpec.$, MostVisitedPageHandler_AddMostVisitedTile_ResponseParamsSpec.$, [
            url,
            title
        ]);
    }
    /**
     * @param { !url_mojom_Url } url
     */
    deleteMostVisitedTile(url) {
        this.proxy.sendMessage(1, MostVisitedPageHandler_DeleteMostVisitedTile_ParamsSpec.$, null, [
            url
        ]);
    }
    /**
     * @param { !url_mojom_Url } url
     * @param { !number } newPos
     */
    reorderMostVisitedTile(url, newPos) {
        this.proxy.sendMessage(2, MostVisitedPageHandler_ReorderMostVisitedTile_ParamsSpec.$, null, [
            url,
            newPos
        ]);
    }
    /**
     */
    restoreMostVisitedDefaults() {
        this.proxy.sendMessage(3, MostVisitedPageHandler_RestoreMostVisitedDefaults_ParamsSpec.$, null, []);
    }
    /**
     */
    undoMostVisitedTileAction() {
        this.proxy.sendMessage(4, MostVisitedPageHandler_UndoMostVisitedTileAction_ParamsSpec.$, null, []);
    }
    /**
     */
    updateMostVisitedInfo() {
        this.proxy.sendMessage(5, MostVisitedPageHandler_UpdateMostVisitedInfo_ParamsSpec.$, null, []);
    }
    /**
     * @param { !url_mojom_Url } url
     * @param { !url_mojom_Url } newUrl
     * @param { !string } newTitle
     * @return {!Promise<{
          success: !boolean,
     *  }>}
     */
    updateMostVisitedTile(url, newUrl, newTitle) {
        return this.proxy.sendMessage(6, MostVisitedPageHandler_UpdateMostVisitedTile_ParamsSpec.$, MostVisitedPageHandler_UpdateMostVisitedTile_ResponseParamsSpec.$, [
            url,
            newUrl,
            newTitle
        ]);
    }
    /**
     * @param { !Array<!MostVisitedTile> } tiles
     * @param { !number } time
     */
    onMostVisitedTilesRendered(tiles, time) {
        this.proxy.sendMessage(7, MostVisitedPageHandler_OnMostVisitedTilesRendered_ParamsSpec.$, null, [
            tiles,
            time
        ]);
    }
    /**
     * @param { !MostVisitedTile } tile
     * @param { !number } index
     * @param { !number } mouseButton
     * @param { !boolean } altKey
     * @param { !boolean } ctrlKey
     * @param { !boolean } metaKey
     * @param { !boolean } shiftKey
     */
    onMostVisitedTileNavigation(tile, index, mouseButton, altKey, ctrlKey, metaKey, shiftKey) {
        this.proxy.sendMessage(8, MostVisitedPageHandler_OnMostVisitedTileNavigation_ParamsSpec.$, null, [
            tile,
            index,
            mouseButton,
            altKey,
            ctrlKey,
            metaKey,
            shiftKey
        ]);
    }
}
/**
 * An object which receives request messages for the MostVisitedPageHandler
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class MostVisitedPageHandlerReceiver {
    /**
     * @param {!MostVisitedPageHandlerInterface } impl
     */
    constructor(impl) {
        /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!MostVisitedPageHandlerRemote>} */
        this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(MostVisitedPageHandlerRemote);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MostVisitedPageHandlerRemote>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);
        this.helper_internal_.registerHandler(0, MostVisitedPageHandler_AddMostVisitedTile_ParamsSpec.$, MostVisitedPageHandler_AddMostVisitedTile_ResponseParamsSpec.$, impl.addMostVisitedTile.bind(impl));
        this.helper_internal_.registerHandler(1, MostVisitedPageHandler_DeleteMostVisitedTile_ParamsSpec.$, null, impl.deleteMostVisitedTile.bind(impl));
        this.helper_internal_.registerHandler(2, MostVisitedPageHandler_ReorderMostVisitedTile_ParamsSpec.$, null, impl.reorderMostVisitedTile.bind(impl));
        this.helper_internal_.registerHandler(3, MostVisitedPageHandler_RestoreMostVisitedDefaults_ParamsSpec.$, null, impl.restoreMostVisitedDefaults.bind(impl));
        this.helper_internal_.registerHandler(4, MostVisitedPageHandler_UndoMostVisitedTileAction_ParamsSpec.$, null, impl.undoMostVisitedTileAction.bind(impl));
        this.helper_internal_.registerHandler(5, MostVisitedPageHandler_UpdateMostVisitedInfo_ParamsSpec.$, null, impl.updateMostVisitedInfo.bind(impl));
        this.helper_internal_.registerHandler(6, MostVisitedPageHandler_UpdateMostVisitedTile_ParamsSpec.$, MostVisitedPageHandler_UpdateMostVisitedTile_ResponseParamsSpec.$, impl.updateMostVisitedTile.bind(impl));
        this.helper_internal_.registerHandler(7, MostVisitedPageHandler_OnMostVisitedTilesRendered_ParamsSpec.$, null, impl.onMostVisitedTilesRendered.bind(impl));
        this.helper_internal_.registerHandler(8, MostVisitedPageHandler_OnMostVisitedTileNavigation_ParamsSpec.$, null, impl.onMostVisitedTileNavigation.bind(impl));
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
    }
}
export class MostVisitedPageHandler {
    /**
     * @return {!string}
     */
    static get $interfaceName() {
        return "most_visited.mojom.MostVisitedPageHandler";
    }
    /**
     * Returns a remote for this interface which sends messages to the browser.
     * The browser must have an interface request binder registered for this
     * interface and accessible to the calling document's frame.
     *
     * @return {!MostVisitedPageHandlerRemote}
     */
    static getRemote() {
        let remote = new MostVisitedPageHandlerRemote;
        remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
        return remote;
    }
}
/**
 * An object which receives request messages for the MostVisitedPageHandler
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class MostVisitedPageHandlerCallbackRouter {
    constructor() {
        this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(MostVisitedPageHandlerRemote);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MostVisitedPageHandlerRemote>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);
        this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.addMostVisitedTile =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(0, MostVisitedPageHandler_AddMostVisitedTile_ParamsSpec.$, MostVisitedPageHandler_AddMostVisitedTile_ResponseParamsSpec.$, this.addMostVisitedTile.createReceiverHandler(true /* expectsResponse */));
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.deleteMostVisitedTile =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(1, MostVisitedPageHandler_DeleteMostVisitedTile_ParamsSpec.$, null, this.deleteMostVisitedTile.createReceiverHandler(false /* expectsResponse */));
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.reorderMostVisitedTile =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(2, MostVisitedPageHandler_ReorderMostVisitedTile_ParamsSpec.$, null, this.reorderMostVisitedTile.createReceiverHandler(false /* expectsResponse */));
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.restoreMostVisitedDefaults =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(3, MostVisitedPageHandler_RestoreMostVisitedDefaults_ParamsSpec.$, null, this.restoreMostVisitedDefaults.createReceiverHandler(false /* expectsResponse */));
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.undoMostVisitedTileAction =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(4, MostVisitedPageHandler_UndoMostVisitedTileAction_ParamsSpec.$, null, this.undoMostVisitedTileAction.createReceiverHandler(false /* expectsResponse */));
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.updateMostVisitedInfo =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(5, MostVisitedPageHandler_UpdateMostVisitedInfo_ParamsSpec.$, null, this.updateMostVisitedInfo.createReceiverHandler(false /* expectsResponse */));
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.updateMostVisitedTile =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(6, MostVisitedPageHandler_UpdateMostVisitedTile_ParamsSpec.$, MostVisitedPageHandler_UpdateMostVisitedTile_ResponseParamsSpec.$, this.updateMostVisitedTile.createReceiverHandler(true /* expectsResponse */));
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.onMostVisitedTilesRendered =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(7, MostVisitedPageHandler_OnMostVisitedTilesRendered_ParamsSpec.$, null, this.onMostVisitedTilesRendered.createReceiverHandler(false /* expectsResponse */));
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.onMostVisitedTileNavigation =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(8, MostVisitedPageHandler_OnMostVisitedTileNavigation_ParamsSpec.$, null, this.onMostVisitedTileNavigation.createReceiverHandler(false /* expectsResponse */));
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
    }
    /**
     * @param {number} id An ID returned by a prior call to addListener.
     * @return {boolean} True iff the identified listener was found and removed.
     */
    removeListener(id) {
        return this.router_.removeListener(id);
    }
}
/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class MostVisitedPagePendingReceiver {
    /**
     * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
     */
    constructor(handle) {
        /** @public {!mojo.internal.interfaceSupport.Endpoint} */
        this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
    }
    /** @param {string=} scope */
    bindInBrowser(scope = 'context') {
        mojo.internal.interfaceSupport.bind(this.handle, 'most_visited.mojom.MostVisitedPage', scope);
    }
}
/** @interface */
export class MostVisitedPageInterface {
    /**
     * @param { !MostVisitedInfo } info
     */
    setMostVisitedInfo(info) { }
}
/**
 * @implements { MostVisitedPageInterface }
 */
export class MostVisitedPageRemote {
    /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
    constructor(handle = undefined) {
        /**
         * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!MostVisitedPagePendingReceiver>}
         */
        this.proxy =
            new mojo.internal.interfaceSupport.InterfaceRemoteBase(MostVisitedPagePendingReceiver, handle);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!MostVisitedPagePendingReceiver>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
    }
    /**
     * @param { !MostVisitedInfo } info
     */
    setMostVisitedInfo(info) {
        this.proxy.sendMessage(0, MostVisitedPage_SetMostVisitedInfo_ParamsSpec.$, null, [
            info
        ]);
    }
}
/**
 * An object which receives request messages for the MostVisitedPage
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class MostVisitedPageReceiver {
    /**
     * @param {!MostVisitedPageInterface } impl
     */
    constructor(impl) {
        /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!MostVisitedPageRemote>} */
        this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(MostVisitedPageRemote);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MostVisitedPageRemote>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);
        this.helper_internal_.registerHandler(0, MostVisitedPage_SetMostVisitedInfo_ParamsSpec.$, null, impl.setMostVisitedInfo.bind(impl));
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
    }
}
export class MostVisitedPage {
    /**
     * @return {!string}
     */
    static get $interfaceName() {
        return "most_visited.mojom.MostVisitedPage";
    }
    /**
     * Returns a remote for this interface which sends messages to the browser.
     * The browser must have an interface request binder registered for this
     * interface and accessible to the calling document's frame.
     *
     * @return {!MostVisitedPageRemote}
     */
    static getRemote() {
        let remote = new MostVisitedPageRemote;
        remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
        return remote;
    }
}
/**
 * An object which receives request messages for the MostVisitedPage
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class MostVisitedPageCallbackRouter {
    constructor() {
        this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(MostVisitedPageRemote);
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MostVisitedPageRemote>}
         */
        this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);
        this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;
        /**
         * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
         */
        this.setMostVisitedInfo =
            new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(this.router_);
        this.helper_internal_.registerHandler(0, MostVisitedPage_SetMostVisitedInfo_ParamsSpec.$, null, this.setMostVisitedInfo.createReceiverHandler(false /* expectsResponse */));
        /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
        this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
    }
    /**
     * @param {number} id An ID returned by a prior call to addListener.
     * @return {boolean} True iff the identified listener was found and removed.
     */
    removeListener(id) {
        return this.router_.removeListener(id);
    }
}
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MostVisitedTileSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MostVisitedThemeSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MostVisitedInfoSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MostVisitedPageHandlerFactory_CreatePageHandler_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MostVisitedPageHandler_AddMostVisitedTile_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MostVisitedPageHandler_AddMostVisitedTile_ResponseParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MostVisitedPageHandler_DeleteMostVisitedTile_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MostVisitedPageHandler_ReorderMostVisitedTile_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MostVisitedPageHandler_RestoreMostVisitedDefaults_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MostVisitedPageHandler_UndoMostVisitedTileAction_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MostVisitedPageHandler_UpdateMostVisitedInfo_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MostVisitedPageHandler_UpdateMostVisitedTile_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MostVisitedPageHandler_UpdateMostVisitedTile_ResponseParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MostVisitedPageHandler_OnMostVisitedTilesRendered_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MostVisitedPageHandler_OnMostVisitedTileNavigation_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MostVisitedPage_SetMostVisitedInfo_ParamsSpec = { $: /** @type {!mojo.internal.MojomType} */ ({}) };
mojo.internal.Struct(MostVisitedTileSpec.$, 'MostVisitedTile', [
    mojo.internal.StructField('title', 0, 0, mojo.internal.String, null, false /* nullable */, 0),
    mojo.internal.StructField('titleDirection', 8, 0, mojoBase_mojom_TextDirectionSpec.$, 0, false /* nullable */, 0),
    mojo.internal.StructField('url', 16, 0, url_mojom_UrlSpec.$, null, false /* nullable */, 0),
    mojo.internal.StructField('isQueryTile', 12, 0, mojo.internal.Bool, false, false /* nullable */, 0),
    mojo.internal.StructField('source', 24, 0, mojo.internal.Int32, 0, false /* nullable */, 0),
    mojo.internal.StructField('titleSource', 28, 0, mojo.internal.Int32, 0, false /* nullable */, 0),
], [[0, 40],]);
/**
 * @record
 */
export class MostVisitedTile {
    constructor() {
        /** @type { !string } */
        this.title;
        /** @type { !mojoBase_mojom_TextDirection } */
        this.titleDirection;
        /** @type { !boolean } */
        this.isQueryTile;
        /** @type { !url_mojom_Url } */
        this.url;
        /** @type { !number } */
        this.source;
        /** @type { !number } */
        this.titleSource;
    }
}
mojo.internal.Struct(MostVisitedThemeSpec.$, 'MostVisitedTheme', [
    mojo.internal.StructField('backgroundColor', 0, 0, skia_mojom_SkColorSpec.$, null, false /* nullable */, 0),
    mojo.internal.StructField('useWhiteTileIcon', 8, 0, mojo.internal.Bool, false, false /* nullable */, 0),
    mojo.internal.StructField('useTitlePill', 8, 1, mojo.internal.Bool, false, false /* nullable */, 0),
    mojo.internal.StructField('isDark', 8, 2, mojo.internal.Bool, false, false /* nullable */, 0),
], [[0, 24],]);
/**
 * @record
 */
export class MostVisitedTheme {
    constructor() {
        /** @type { !skia_mojom_SkColor } */
        this.backgroundColor;
        /** @type { !boolean } */
        this.useWhiteTileIcon;
        /** @type { !boolean } */
        this.useTitlePill;
        /** @type { !boolean } */
        this.isDark;
    }
}
mojo.internal.Struct(MostVisitedInfoSpec.$, 'MostVisitedInfo', [
    mojo.internal.StructField('customLinksEnabled', 0, 0, mojo.internal.Bool, false, false /* nullable */, 0),
    mojo.internal.StructField('visible', 0, 1, mojo.internal.Bool, false, false /* nullable */, 0),
    mojo.internal.StructField('tiles', 8, 0, mojo.internal.Array(MostVisitedTileSpec.$, false), null, false /* nullable */, 0),
], [[0, 24],]);
/**
 * @record
 */
export class MostVisitedInfo {
    constructor() {
        /** @type { !boolean } */
        this.customLinksEnabled;
        /** @type { !boolean } */
        this.visible;
        /** @type { !Array<!MostVisitedTile> } */
        this.tiles;
    }
}
mojo.internal.Struct(MostVisitedPageHandlerFactory_CreatePageHandler_ParamsSpec.$, 'MostVisitedPageHandlerFactory_CreatePageHandler_Params', [
    mojo.internal.StructField('page', 0, 0, mojo.internal.InterfaceProxy(MostVisitedPageRemote), null, false /* nullable */, 0),
    mojo.internal.StructField('handler', 8, 0, mojo.internal.InterfaceRequest(MostVisitedPageHandlerPendingReceiver), null, false /* nullable */, 0),
], [[0, 24],]);
/**
 * @record
 */
export class MostVisitedPageHandlerFactory_CreatePageHandler_Params {
    constructor() {
        /** @type { !MostVisitedPageRemote } */
        this.page;
        /** @type { !MostVisitedPageHandlerPendingReceiver } */
        this.handler;
    }
}
mojo.internal.Struct(MostVisitedPageHandler_AddMostVisitedTile_ParamsSpec.$, 'MostVisitedPageHandler_AddMostVisitedTile_Params', [
    mojo.internal.StructField('url', 0, 0, url_mojom_UrlSpec.$, null, false /* nullable */, 0),
    mojo.internal.StructField('title', 8, 0, mojo.internal.String, null, false /* nullable */, 0),
], [[0, 24],]);
/**
 * @record
 */
export class MostVisitedPageHandler_AddMostVisitedTile_Params {
    constructor() {
        /** @type { !url_mojom_Url } */
        this.url;
        /** @type { !string } */
        this.title;
    }
}
mojo.internal.Struct(MostVisitedPageHandler_AddMostVisitedTile_ResponseParamsSpec.$, 'MostVisitedPageHandler_AddMostVisitedTile_ResponseParams', [
    mojo.internal.StructField('success', 0, 0, mojo.internal.Bool, false, false /* nullable */, 0),
], [[0, 16],]);
/**
 * @record
 */
export class MostVisitedPageHandler_AddMostVisitedTile_ResponseParams {
    constructor() {
        /** @type { !boolean } */
        this.success;
    }
}
mojo.internal.Struct(MostVisitedPageHandler_DeleteMostVisitedTile_ParamsSpec.$, 'MostVisitedPageHandler_DeleteMostVisitedTile_Params', [
    mojo.internal.StructField('url', 0, 0, url_mojom_UrlSpec.$, null, false /* nullable */, 0),
], [[0, 16],]);
/**
 * @record
 */
export class MostVisitedPageHandler_DeleteMostVisitedTile_Params {
    constructor() {
        /** @type { !url_mojom_Url } */
        this.url;
    }
}
mojo.internal.Struct(MostVisitedPageHandler_ReorderMostVisitedTile_ParamsSpec.$, 'MostVisitedPageHandler_ReorderMostVisitedTile_Params', [
    mojo.internal.StructField('url', 0, 0, url_mojom_UrlSpec.$, null, false /* nullable */, 0),
    mojo.internal.StructField('newPos', 8, 0, mojo.internal.Uint8, 0, false /* nullable */, 0),
], [[0, 24],]);
/**
 * @record
 */
export class MostVisitedPageHandler_ReorderMostVisitedTile_Params {
    constructor() {
        /** @type { !url_mojom_Url } */
        this.url;
        /** @type { !number } */
        this.newPos;
    }
}
mojo.internal.Struct(MostVisitedPageHandler_RestoreMostVisitedDefaults_ParamsSpec.$, 'MostVisitedPageHandler_RestoreMostVisitedDefaults_Params', [], [[0, 8],]);
/**
 * @record
 */
export class MostVisitedPageHandler_RestoreMostVisitedDefaults_Params {
    constructor() {
    }
}
mojo.internal.Struct(MostVisitedPageHandler_UndoMostVisitedTileAction_ParamsSpec.$, 'MostVisitedPageHandler_UndoMostVisitedTileAction_Params', [], [[0, 8],]);
/**
 * @record
 */
export class MostVisitedPageHandler_UndoMostVisitedTileAction_Params {
    constructor() {
    }
}
mojo.internal.Struct(MostVisitedPageHandler_UpdateMostVisitedInfo_ParamsSpec.$, 'MostVisitedPageHandler_UpdateMostVisitedInfo_Params', [], [[0, 8],]);
/**
 * @record
 */
export class MostVisitedPageHandler_UpdateMostVisitedInfo_Params {
    constructor() {
    }
}
mojo.internal.Struct(MostVisitedPageHandler_UpdateMostVisitedTile_ParamsSpec.$, 'MostVisitedPageHandler_UpdateMostVisitedTile_Params', [
    mojo.internal.StructField('url', 0, 0, url_mojom_UrlSpec.$, null, false /* nullable */, 0),
    mojo.internal.StructField('newUrl', 8, 0, url_mojom_UrlSpec.$, null, false /* nullable */, 0),
    mojo.internal.StructField('newTitle', 16, 0, mojo.internal.String, null, false /* nullable */, 0),
], [[0, 32],]);
/**
 * @record
 */
export class MostVisitedPageHandler_UpdateMostVisitedTile_Params {
    constructor() {
        /** @type { !url_mojom_Url } */
        this.url;
        /** @type { !url_mojom_Url } */
        this.newUrl;
        /** @type { !string } */
        this.newTitle;
    }
}
mojo.internal.Struct(MostVisitedPageHandler_UpdateMostVisitedTile_ResponseParamsSpec.$, 'MostVisitedPageHandler_UpdateMostVisitedTile_ResponseParams', [
    mojo.internal.StructField('success', 0, 0, mojo.internal.Bool, false, false /* nullable */, 0),
], [[0, 16],]);
/**
 * @record
 */
export class MostVisitedPageHandler_UpdateMostVisitedTile_ResponseParams {
    constructor() {
        /** @type { !boolean } */
        this.success;
    }
}
mojo.internal.Struct(MostVisitedPageHandler_OnMostVisitedTilesRendered_ParamsSpec.$, 'MostVisitedPageHandler_OnMostVisitedTilesRendered_Params', [
    mojo.internal.StructField('tiles', 0, 0, mojo.internal.Array(MostVisitedTileSpec.$, false), null, false /* nullable */, 0),
    mojo.internal.StructField('time', 8, 0, mojo.internal.Double, 0, false /* nullable */, 0),
], [[0, 24],]);
/**
 * @record
 */
export class MostVisitedPageHandler_OnMostVisitedTilesRendered_Params {
    constructor() {
        /** @type { !Array<!MostVisitedTile> } */
        this.tiles;
        /** @type { !number } */
        this.time;
    }
}
mojo.internal.Struct(MostVisitedPageHandler_OnMostVisitedTileNavigation_ParamsSpec.$, 'MostVisitedPageHandler_OnMostVisitedTileNavigation_Params', [
    mojo.internal.StructField('tile', 0, 0, MostVisitedTileSpec.$, null, false /* nullable */, 0),
    mojo.internal.StructField('index', 8, 0, mojo.internal.Uint32, 0, false /* nullable */, 0),
    mojo.internal.StructField('mouseButton', 12, 0, mojo.internal.Uint8, 0, false /* nullable */, 0),
    mojo.internal.StructField('altKey', 13, 0, mojo.internal.Bool, false, false /* nullable */, 0),
    mojo.internal.StructField('ctrlKey', 13, 1, mojo.internal.Bool, false, false /* nullable */, 0),
    mojo.internal.StructField('metaKey', 13, 2, mojo.internal.Bool, false, false /* nullable */, 0),
    mojo.internal.StructField('shiftKey', 13, 3, mojo.internal.Bool, false, false /* nullable */, 0),
], [[0, 24],]);
/**
 * @record
 */
export class MostVisitedPageHandler_OnMostVisitedTileNavigation_Params {
    constructor() {
        /** @type { !MostVisitedTile } */
        this.tile;
        /** @type { !number } */
        this.index;
        /** @type { !number } */
        this.mouseButton;
        /** @type { !boolean } */
        this.altKey;
        /** @type { !boolean } */
        this.ctrlKey;
        /** @type { !boolean } */
        this.metaKey;
        /** @type { !boolean } */
        this.shiftKey;
    }
}
mojo.internal.Struct(MostVisitedPage_SetMostVisitedInfo_ParamsSpec.$, 'MostVisitedPage_SetMostVisitedInfo_Params', [
    mojo.internal.StructField('info', 0, 0, MostVisitedInfoSpec.$, null, false /* nullable */, 0),
], [[0, 16],]);
/**
 * @record
 */
export class MostVisitedPage_SetMostVisitedInfo_Params {
    constructor() {
        /** @type { !MostVisitedInfo } */
        this.info;
    }
}
